# -*- coding: utf-8 -*-
"""DL EX 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FwNHOCjmUTyMjW3U6X9t0fy2iOS94pla
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math

from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris

iris = load_iris()

idxs = np.where(iris.target<3)
X = iris.data[idxs]
y = iris.target[idxs]

print("Name : PALLAPU KARTHIK")
print("Reg No : 9920004496")
plt.scatter(X[y==0][:,0], X[y==0][:,2], color = "green", label='Iris-Setosa')
plt.scatter(X[y==1][:,0], X[y==1][:,2], color = "black", label='Iris-Versicolour')
plt.scatter(X[y==2][:,0], X[y==2][:,2], color = "red", label = 'Iris-virginica')
plt.title('Iris Plants Database')
plt.xlabel('sepal length in cm')
plt.ylabel('petal length in cm')
plt.legend()
plt.show()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 2)

print(y_train)
print(y_test)

weights = np.random.normal(size = X_train.shape[1])
bias = 1

print(weights)

learning_rate = 0.3
no_of_epochs = 50

del_w = np.zeros(weights.shape)
hist_loss = []
hist_accuracy = []

a = []
for i in X_train:
    i = i/10
    a.append(i)
b = []
for i in X_test:
    i = i/10
    b.append(i)

for i in range(no_of_epochs):
    output = []
    for i in a:
        if (i.dot(weights)+bias)>0.7:
            output.append(2)
        elif (i.dot(weights)+bias)>0.3:
            output.append(1)
        else:
            output.append(0)
    error = np.mean((y_train-output)**2)
    print('Error : ',error)
    weights -= learning_rate * np.dot((output-y_train),a)
    print('Weights : ',weights)
    print("Bias : ",bias)
    loss = np.mean((output-y_train)**2)
    hist_loss.append(loss)
    outputval = []
    for i in b:
        if (i.dot(weights)+bias)>0.7:
            outputval.append(2)
        elif (i.dot(weights)+bias)>0.3:
            outputval.append(1)
        else:
            outputval.append(0)
    accuracy = np.mean(np.where(outputval == y_test,1,0))
    print(outputval)
    print(y_test)
    hist_accuracy.append(accuracy)

print(hist_loss)
print(hist_accuracy)

print("Name : PALLAPU KARTHIK")
print("Reg No : 9920004496")
fig = plt.figure(figsize=(8,4))
a = fig.add_subplot(1,2,1)
imgplot = plt.plot(hist_loss)
plt.xlabel('epochs')
a.set_title('Training loss')
a = fig.add_subplot(1,2,2)
imgplot = plt.plot(hist_accuracy)
plt.xlabel('epochs')
a.set_title('Validation Accracy')
plt.show()

weights = np.random.normal(size = X_train.shape[1])
bias = 1

print(weights)

del_w = np.zeros(weights.shape)
hist_loss = []
hist_accuracy = []

learning_rate = 0.3
no_of_epochs = 50

a = []
for i in X_train:
    i = i/10
    a.append(i)
b = []
for i in X_test:
    i = i/10
    b.append(i)

actual_output = []
for i in y_train:
    if i ==0:
        actual_output.append(-1)
    elif i == 1:
        actual_output.append(0)
    else:
        actual_output.append(1)
y_testa = []
for i in y_test:
    if i ==0:
        y_testa.append(-1)
    elif i == 1:
        y_testa.append(0)
    else:
        y_testa.append(1)
actual_output = np.array(actual_output)
y_testa = np.array(y_testa)

for i in range(no_of_epochs):
    output = []
    c = []
    for i in a:
        c.append(i.dot(weights)+bias)
    for i in c:
        output.append(1 / (1 + math.exp(-(i))))
    e = []
    for i in output:
        if i > 0.7:
            e.append(1)
        elif i >0.35:
            e.append(0)
        else:
            e.append(-1)
    error = np.mean((actual_output-e)**2)
    print('Error : ',error)
    weights -= learning_rate * np.dot((e-actual_output),a)
    print('Weights : ',weights)
    print("Bias : ",bias)
    loss = np.mean((e-actual_output)**2)
    hist_loss.append(loss)
    outputval = []
    d = []
    f = []
    for i in b:
        d.append(i.dot(weights)+bias)
    for i in d:
        outputval.append(1 / (1 + math.exp(-(i))))
    for i in outputval:
        if i >0.7:
            f.append(1)
        elif i > 0.35:
            f.append(0)
        else :
            f.append(-1)
    accuracy = np.mean(np.where(f == y_testa,1,0))
    hist_accuracy.append(accuracy)

fig = plt.figure(figsize=(8,4))
a = fig.add_subplot(1,2,1)
imgplot = plt.plot(hist_loss)
plt.xlabel('epochs')
a.set_title('Training loss')
a = fig.add_subplot(1,2,2)
imgplot = plt.plot(hist_accuracy)
plt.xlabel('epochs')
a.set_title('Validation Accracy')
plt.show()

